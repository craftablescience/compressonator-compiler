name: Build
on:
  push:
    branches:
      - main
  workflow_dispatch:
  # nothing here

env:
  COMPRESSONATOR_REF: 'f4b53d79ec5abbb50924f58aebb7bf2793200b94' # Latest as of 6/29/2024

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os:
          - { id: windows-latest, name: Windows }
          - { id: ubuntu-latest, name: Linux }
          - { id: macos-latest, name: macOS }
        build_type: [Debug, Release]
    runs-on: ${{matrix.os.id}}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Checkout Compressonator
        uses: actions/checkout@v4
        with:
          repository: 'GPUOpen-Tools/compressonator'
          ref: '${{env.COMPRESSONATOR_REF}}'
          path: 'compressonator'
          submodules: recursive

      - name: Checkout GLM
        uses: actions/checkout@v4
        with:
          repository: 'g-truc/glm'
          path: 'common/lib/ext/glm'
          submodules: recursive

      - name: Patch Compressonator [Windows]
        if: matrix.os.id == 'windows-latest'
        run: |
          Copy-Item -Path patches/cmp_compressonatorlib/CMakeLists.txt -Destination compressonator/cmp_compressonatorlib/CMakeLists.txt
          Copy-Item -Path patches/cmp_core/CMakeLists.txt              -Destination compressonator/cmp_core/CMakeLists.txt
          Copy-Item -Path patches/external/glm/CMakeLists.txt          -Destination compressonator/external/glm/CMakeLists.txt
          Copy-Item -Path patches/CMakeLists.txt                       -Destination compressonator/CMakeLists.txt

      - name: Patch Compressonator [Linux / macOS]
        if: matrix.os.id == 'ubuntu-latest' || matrix.os.id == 'macos-latest'
        run: |
          cp patches/cmp_compressonatorlib/CMakeLists.txt compressonator/cmp_compressonatorlib/CMakeLists.txt
          cp patches/cmp_core/CMakeLists.txt              compressonator/cmp_core/CMakeLists.txt
          cp patches/external/glm/CMakeLists.txt          compressonator/external/glm/CMakeLists.txt
          cp patches/CMakeLists.txt                       compressonator/CMakeLists.txt

      - name: Set up MSVC [Windows]
        if: matrix.os.id == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64
          spectre: true

      - name: Install Dependencies [Linux]
        if: matrix.os.id == 'ubuntu-latest'
        run: |
          sudo apt update && sudo apt install -y ninja-build

      - name: Install Dependencies [macOS]
        if: matrix.os.id == 'macos-latest'
        run: |
          brew install ninja

      - name: Configure CMake
        working-directory: compressonator
        run: cmake -G "Ninja" -B cmake-build -DCMAKE_BUILD_TYPE=${{matrix.build_type}}

      - name: Build
        working-directory: compressonator
        run: cmake --build cmake-build --config ${{matrix.build_type}}

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: 'Compressonator-${{matrix.os.name}}-${{matrix.build_type}}'
          path: |
            compressonator/out/*
          retention-days: 7

  merge:
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Compressonator
        uses: actions/checkout@v4
        with:
          repository: 'GPUOpen-Tools/compressonator'
          ref: '${{env.COMPRESSONATOR_REF}}'
          path: 'compressonator'
          submodules: recursive

      - name: Create Destination Directories
        run: |
          mkdir win_x86_64
          mkdir linux_x86_64
          mkdir osx_arm64
          mkdir dest
          mkdir dest/include
          mkdir dest/lib
          mkdir dest/lib/win_x86_64
          mkdir dest/lib/linux_x86_64
          mkdir dest/lib/osx_arm64

      - name: Copy Header & License
        run: |
          cp compressonator/cmp_compressonatorlib/compressonator.h dest/include/Compressonator.h
          cp compressonator/license/license.txt dest/LICENSE

      - name: Download Artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            const artifacts = (await github.rest.actions.listWorkflowRunArtifacts({owner: context.repo.owner, repo: context.repo.repo, run_id: ${{github.run_id}}})).data.artifacts;
            const windowsArtifacts = artifacts.filter(artifact => artifact.name.includes("Windows"));
            const linuxArtifacts = artifacts.filter(artifact => artifact.name.includes("Linux"));
            const macOSArtifacts = artifacts.filter(artifact => artifact.name.includes("macOS"));
            console.log(`Found ${windowsArtifacts.length} Windows artifacts, ${linuxArtifacts.length} Linux artifacts, ${macOSArtifacts.length} macOS artifacts.`);

            for (const artifact of windowsArtifacts) {
                console.log(`Downloading "${artifact.name}.zip"...`);
                const download = await github.rest.actions.downloadArtifact({owner: context.repo.owner, repo: context.repo.repo, artifact_id: artifact.id, archive_format: 'zip'});
                fs.writeFileSync(`${{github.workspace}}/win_x86_64/${artifact.name}.zip`, Buffer.from(download.data));
            }
            for (const artifact of linuxArtifacts) {
                console.log(`Downloading "${artifact.name}.zip"...`);
                const download = await github.rest.actions.downloadArtifact({owner: context.repo.owner, repo: context.repo.repo, artifact_id: artifact.id, archive_format: 'zip'});
                fs.writeFileSync(`${{github.workspace}}/linux_x86_64/${artifact.name}.zip`, Buffer.from(download.data));
            }
            for (const artifact of macOSArtifacts) {
                console.log(`Downloading "${artifact.name}.zip"...`);
                const download = await github.rest.actions.downloadArtifact({owner: context.repo.owner, repo: context.repo.repo, artifact_id: artifact.id, archive_format: 'zip'});
                fs.writeFileSync(`${{github.workspace}}/osx_arm64/${artifact.name}.zip`, Buffer.from(download.data));
            }
            console.log("Artifact download complete!");

      - name: Unzip Artifacts
        run: |
          unzip -o "win_x86_64/*.zip"   -d dest/lib/win_x86_64
          unzip -o "linux_x86_64/*.zip" -d dest/lib/linux_x86_64
          unzip -o "osx_arm64/*.zip"    -d dest/lib/osx_arm64

      - name: Upload Release
        uses: actions/upload-artifact@v4
        with:
          name: Compressonator
          path: |
            dest/include/
            dest/lib/
            dest/LICENSE
          retention-days: 7
